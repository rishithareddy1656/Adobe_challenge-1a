# Core PDF processing
PyMuPDF==1.24.5 # Highly recommended for robust PDF parsing and text extraction

# For outline/heading detection (choose based on your approach)
# Option 1: Rule-based/Heuristic (lighter, faster for simple cases)
# No specific external library beyond PyMuPDF itself for basic text/font analysis

# Option 2: NLP/ML based (more robust, but larger footprint and complexity)
# If using basic NLP for text processing (e.g., tokenization, sentence splitting)
nltk==3.8.1
# or
spacy==3.7.4
# If using spacy, you might need to download a language model:
# python -m spacy download en_core_web_sm (for English)
# python -m spacy download xx_ent_wiki_sm (for multilingual)
# Make sure to include the download step in your Dockerfile if you use this.

# If using machine learning models for classification or other tasks
scikit-learn==1.3.2
# or if using deep learning frameworks (consider model size constraint)
# tensorflow==2.15.0
# torch==2.1.0

# For handling different languages (e.g., Japanese) if you go for the bonus
# If using SpaCy, its multilingual models might suffice.
# If more specific libraries are needed for certain languages:
# for Japanese:
# fugashi==1.2.1
# unidic-lite==1.0.8

# For JSON output
# (usually built-in 'json' module is sufficient, no external library needed)

# Example for a more comprehensive setup (uncomment and adjust as needed)
# You might not need all of these, select based on your actual implementation.
# pdfminer.six==20221105 # Alternative PDF parser
# beautifulsoup4==4.12.3 # If you convert to HTML for parsing
# lxml==4.9.3 # Dependency for beautifulsoup4 and others

# Essential for any general Python project
# If you are managing command-line arguments
# click==8.1.7

# If you use pandas for data manipulation
# pandas==2.1.4

# If you need to work with images (e.g., for OCR within PDF if not using PyMuPDF's capabilities)
# Pillow==10.1.0